#!/bin/bash
source $(dirname $0)/stack-helpers.sh
LOG=/tmp/log/$(basename $0).log

(
  [ $# -ge 1 ] || abort usage: $(basename $0) VERSION

  VERSION=$1
  MNT=/tmp/cedar64-$VERSION-build
  IMG=/tmp/cedar64-$VERSION.img
  TGZ=/tmp/cedar64-$VERSION.tar.gz
  IMG_MNT=/tmp/cedar64-$VERSION

  [ $UID = 0 ]  || abort fatal: must be called with sudo
  [[ -d $MNT ]] || abort fatal: dir "$MNT" not found

  function on_exit() {
    display Cleaning up. Logs at $LOG
    ( umount $IMG_MNT 2>&1 || true ) | indent
  }
  trap on_exit EXIT

  display Starting capture at $(date)
  display Creating image file $IMG
  (
    mkdir -p $(dirname $IMG)
    dd if=/dev/zero of=$IMG bs=100M count=24
    yes | mkfs -t ext3 -m 1 $IMG
    tune2fs -c 9999  $IMG
    tune2fs -i 9999w $IMG
  ) 2>&1 | indent

  display Mounting image $IMG_MNT
  mkdir -p $IMG_MNT
  mount -o loop,noatime,nodiratime $IMG $IMG_MNT

  display Copying stack to image
  (
    cd $MNT
    rsync -a --exclude=/lib/modules bin etc lib lib64 sbin usr $IMG_MNT
    rsync -a var/lib $IMG_MNT/var
  ) | indent

  display Modifying image directories and files
  (
    # etc/heroku is a mountpoint for runtime dyno information
    # sys is there so users of the stack can mount a sysfs on it (/sys is the default location)
    for d in app tmp proc sys dev var var/log var/tmp home/group_home etc/heroku; do
      mkdir -p $IMG_MNT/$d
    done
    chmod 755 $IMG_MNT/home/group_home

    echo "127.0.0.1 localhost localhost.localdomain" > $IMG_MNT/etc/hosts

    echo "heroku-runtime" > $IMG_MNT/etc/hostname

    for f in etc/profile etc/bash.bashrc; do
      echo "export PS1='\\[\\033[01;34m\\]\\w\\[\\033[00m\\] \\[\\033[01;32m\\]$ \\[\\033[00m\\]'" > $IMG_MNT/$f
    done

    cat >$IMG_MNT/etc/resolv.conf <<EOF
nameserver 172.16.0.23
domain z-2.compute-1.internal
search z-2.compute-1.internal
EOF

    cat > $IMG_MNT/home/group_home/.gitconfig <<EOF
[user]
	name = Heroku Git
	email = git@heroku.com
EOF
    chmod 644 $IMG_MNT/home/group_home/.gitconfig
  ) | indent

  display Creating tgz image and MD5
  tar -zcpf $TGZ -C $IMG_MNT ./
  md5sum $TGZ | cut -d ' ' -f 1 | tr -d '\n' | tee $TGZ.md5 | indent

  display Unmounting image
  umount $IMG_MNT

  display MD5ing and gzipping image
  (
    md5sum $IMG | cut -d ' ' -f 1 | tr -d '\n' | tee $IMG.md5
    gzip $IMG
  ) | indent
) 2>&1 | tee $LOG
